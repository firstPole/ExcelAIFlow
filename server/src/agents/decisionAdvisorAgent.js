// server/src/agents/decisionAdvisorAgent.js
import { logger } from '../utils/logger.js';

/**
 * Advises on strategic decisions based on provided business insights using an LLM.
 *
 * @param {function(string, object): Promise<any>} callLLM - The function to call the LLM (e.g., callLLM from llmClient.js).
 * @param {Array<object>} insights - An array of insight objects generated by the Insight Generator.
 * @param {object} aiSettings - AI configuration settings (provider, model, temperature, maxTokens).
 * @returns {Promise<Array<object>>} A promise that resolves to an array of decision recommendation objects.
 */
export async function adviseOnDecisions(callLLM, insights, aiSettings) {
    logger.info('[DecisionAdvisorAgent] Advising on decisions based on insights...');

    if (!insights || insights.length === 0) {
        logger.warn('[DecisionAdvisorAgent] No insights provided to generate decisions.');
        return [];
    }

    const insightsText = insights.map(i => `- ${i.title}: ${i.description}`).join('\n');

    const prompt = `
    You are an AI Decision Advisor. Your role is to analyze the provided business insights and recommend actionable strategic decisions.

    Here are the insights you need to consider:
    ---
    ${insightsText}
    ---

    Based on these insights, provide 3-5 concrete, strategic recommendations.
    Each recommendation should be an object with the following structure:
    {
        "type": "decision",
        "title": "Concise title of the decision",
        "recommendation": "A clear, actionable recommendation.",
        "rationale": "Why this decision is recommended, linking back to the insights.",
        "urgency": "High, Medium, Low"
    }

    Return a JSON array of these decision recommendation objects. Ensure the output is valid JSON.
    `;

    try {
        const decisions = await callLLM(prompt, aiSettings);
        // Explicitly ensure the result is an array
        if (Array.isArray(decisions) && decisions.every(d => typeof d.title === 'string' && typeof d.recommendation === 'string')) { // Basic validation
            logger.info('[DecisionAdvisorAgent] Successfully generated decisions:', JSON.stringify(decisions, null, 2));
            return decisions;
        } else if (typeof decisions === 'object' && decisions !== null && !Array.isArray(decisions)) {
            // If LLM returns an object with numeric keys (e.g., {0: {}, 1: {}}), convert it to an array
            const decisionsArray = Object.values(decisions);
            if (decisionsArray.every(d => typeof d.title === 'string' && typeof d.recommendation === 'string')) {
                logger.warn(`[DecisionAdvisorAgent] LLM returned object with numeric keys, converted to array:`, decisionsArray);
                return decisionsArray;
            }
        }
        logger.error('[DecisionAdvisorAgent] LLM response was not a valid array of decision objects:', decisions);
        return [];
    } catch (error) {
        logger.error('[DecisionAdvisorAgent] Error advising on decisions from LLM:', error);
        throw new Error(`Failed to advise on decisions: ${error.message}`);
    }
}
